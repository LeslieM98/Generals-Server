/*
 * This file is generated by jOOQ.
 */
package me.leslie.generals.server.persistence.jooq.tables;


import me.leslie.generals.server.persistence.jooq.DefaultSchema;
import me.leslie.generals.server.persistence.jooq.Indexes;
import me.leslie.generals.server.persistence.jooq.Keys;
import me.leslie.generals.server.persistence.jooq.tables.records.ArmyRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.2"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Army extends TableImpl<ArmyRecord> {

    private static final long serialVersionUID = 932733968;

    /**
     * The reference instance of <code>ARMY</code>
     */
    public static final Army ARMY = new Army();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArmyRecord> getRecordType() {
        return ArmyRecord.class;
    }

    /**
     * The column <code>ARMY.HQ</code>.
     */
    public final TableField<ArmyRecord, Integer> HQ = createField(DSL.name("HQ"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ARMY.TROOP</code>.
     */
    public final TableField<ArmyRecord, Integer> TROOP = createField(DSL.name("TROOP"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>ARMY</code> table reference
     */
    public Army() {
        this(DSL.name("ARMY"), null);
    }

    /**
     * Create an aliased <code>ARMY</code> table reference
     */
    public Army(String alias) {
        this(DSL.name(alias), ARMY);
    }

    /**
     * Create an aliased <code>ARMY</code> table reference
     */
    public Army(Name alias) {
        this(alias, ARMY);
    }

    private Army(Name alias, Table<ArmyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Army(Name alias, Table<ArmyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Army(Table<O> child, ForeignKey<O, ArmyRecord> key) {
        super(child, key, ARMY);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_1, Indexes.CONSTRAINT_INDEX_1E, Indexes.CONSTRAINT_INDEX_1EC, Indexes.PRIMARY_KEY_1);
    }

    @Override
    public UniqueKey<ArmyRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_1EC9;
    }

    @Override
    public List<UniqueKey<ArmyRecord>> getKeys() {
        return Arrays.<UniqueKey<ArmyRecord>>asList(Keys.CONSTRAINT_1EC9, Keys.CONSTRAINT_1EC);
    }

    @Override
    public List<ForeignKey<ArmyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ArmyRecord, ?>>asList(Keys.CONSTRAINT_1, Keys.CONSTRAINT_1E);
    }

    public Troop constraint_1() {
        return new Troop(this, Keys.CONSTRAINT_1);
    }

    public Troop constraint_1e() {
        return new Troop(this, Keys.CONSTRAINT_1E);
    }

    @Override
    public Army as(String alias) {
        return new Army(DSL.name(alias), this);
    }

    @Override
    public Army as(Name alias) {
        return new Army(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Army rename(String name) {
        return new Army(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Army rename(Name name) {
        return new Army(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
