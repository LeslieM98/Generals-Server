/*
 * This file is generated by jOOQ.
 */
package me.leslie.generals.server.persistence.jooq.tables.daos;


import me.leslie.generals.server.persistence.jooq.tables.Troop;
import me.leslie.generals.server.persistence.jooq.tables.records.TroopRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import javax.annotation.processing.Generated;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.2"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TroopDao extends DAOImpl<TroopRecord, me.leslie.generals.core.entity.pojos.Troop, Integer> {

    /**
     * Create a new TroopDao without any configuration
     */
    public TroopDao() {
        super(Troop.TROOP, me.leslie.generals.core.entity.pojos.Troop.class);
    }

    /**
     * Create a new TroopDao with an attached configuration
     */
    public TroopDao(Configuration configuration) {
        super(Troop.TROOP, me.leslie.generals.core.entity.pojos.Troop.class, configuration);
    }

    @Override
    public Integer getId(me.leslie.generals.core.entity.pojos.Troop object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>ID BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Troop.TROOP.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchById(Integer... values) {
        return fetch(Troop.TROOP.ID, values);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public me.leslie.generals.core.entity.pojos.Troop fetchOneById(Integer value) {
        return fetchOne(Troop.TROOP.ID, value);
    }

    /**
     * Fetch records that have <code>CURRENT_HEALTH BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchRangeOfCurrentHealth(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Troop.TROOP.CURRENT_HEALTH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CURRENT_HEALTH IN (values)</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchByCurrentHealth(Integer... values) {
        return fetch(Troop.TROOP.CURRENT_HEALTH, values);
    }

    /**
     * Fetch records that have <code>MAX_HEALTH BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchRangeOfMaxHealth(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Troop.TROOP.MAX_HEALTH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>MAX_HEALTH IN (values)</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchByMaxHealth(Integer... values) {
        return fetch(Troop.TROOP.MAX_HEALTH, values);
    }

    /**
     * Fetch records that have <code>POS_X BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchRangeOfPosX(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(Troop.TROOP.POS_X, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>POS_X IN (values)</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchByPosX(Double... values) {
        return fetch(Troop.TROOP.POS_X, values);
    }

    /**
     * Fetch records that have <code>POS_Y BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchRangeOfPosY(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(Troop.TROOP.POS_Y, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>POS_Y IN (values)</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchByPosY(Double... values) {
        return fetch(Troop.TROOP.POS_Y, values);
    }

    /**
     * Fetch records that have <code>NORMAL_SPEED BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchRangeOfNormalSpeed(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(Troop.TROOP.NORMAL_SPEED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>NORMAL_SPEED IN (values)</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchByNormalSpeed(Double... values) {
        return fetch(Troop.TROOP.NORMAL_SPEED, values);
    }

    /**
     * Fetch records that have <code>STREET_SPEED BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchRangeOfStreetSpeed(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(Troop.TROOP.STREET_SPEED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>STREET_SPEED IN (values)</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchByStreetSpeed(Double... values) {
        return fetch(Troop.TROOP.STREET_SPEED, values);
    }

    /**
     * Fetch records that have <code>DIFFICULT_TERRAIN_SPEED BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchRangeOfDifficultTerrainSpeed(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(Troop.TROOP.DIFFICULT_TERRAIN_SPEED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>DIFFICULT_TERRAIN_SPEED IN (values)</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchByDifficultTerrainSpeed(Double... values) {
        return fetch(Troop.TROOP.DIFFICULT_TERRAIN_SPEED, values);
    }

    /**
     * Fetch records that have <code>CLOSE_COMBAT_RANGE BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchRangeOfCloseCombatRange(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(Troop.TROOP.CLOSE_COMBAT_RANGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CLOSE_COMBAT_RANGE IN (values)</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchByCloseCombatRange(Double... values) {
        return fetch(Troop.TROOP.CLOSE_COMBAT_RANGE, values);
    }

    /**
     * Fetch records that have <code>RANGED_COMBAT_RANGE BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchRangeOfRangedCombatRange(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(Troop.TROOP.RANGED_COMBAT_RANGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>RANGED_COMBAT_RANGE IN (values)</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchByRangedCombatRange(Double... values) {
        return fetch(Troop.TROOP.RANGED_COMBAT_RANGE, values);
    }

    /**
     * Fetch records that have <code>NORMAL_VIEW_DISTANCE BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchRangeOfNormalViewDistance(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(Troop.TROOP.NORMAL_VIEW_DISTANCE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>NORMAL_VIEW_DISTANCE IN (values)</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchByNormalViewDistance(Double... values) {
        return fetch(Troop.TROOP.NORMAL_VIEW_DISTANCE, values);
    }

    /**
     * Fetch records that have <code>DISADVANTAGED_VIEW_DISTANCE BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchRangeOfDisadvantagedViewDistance(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(Troop.TROOP.DISADVANTAGED_VIEW_DISTANCE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>DISADVANTAGED_VIEW_DISTANCE IN (values)</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchByDisadvantagedViewDistance(Double... values) {
        return fetch(Troop.TROOP.DISADVANTAGED_VIEW_DISTANCE, values);
    }

    /**
     * Fetch records that have <code>ADVANTAGED_VIEW_DISTANCE BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchRangeOfAdvantagedViewDistance(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(Troop.TROOP.ADVANTAGED_VIEW_DISTANCE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ADVANTAGED_VIEW_DISTANCE IN (values)</code>
     */
    public List<me.leslie.generals.core.entity.pojos.Troop> fetchByAdvantagedViewDistance(Double... values) {
        return fetch(Troop.TROOP.ADVANTAGED_VIEW_DISTANCE, values);
    }
}
